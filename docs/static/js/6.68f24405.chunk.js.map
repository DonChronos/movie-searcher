{"version":3,"sources":["components/moviecard.tsx","components/favbutton.tsx","containers/FavouriteButton.tsx","components/recommended.tsx","containers/Recommended.tsx","components/moviepage.tsx","containers/MoviePage.tsx"],"names":["MovieCardWrapper","styled","div","StyledLink","Link","Movie","props","movie","undefined","to","id","posterUrl","style","backgroundImage","Button","button","FavButton","addFav","delFav","language","languageSelect","translation","en","ru","es","pt","console","log","isFavourite","localStorage","getItem","onClick","connect","state","favouriteMoviesId","dispatch","actions","MoviesWrapper","ul","MovieList","fetchData","newRecommendedRequest","useEffect","movies","data","isLoading","movieCards","map","index","key","recommendedMovies","PageWrapper","MoviePage","url_id","match","params","getMovie","window","scrollTo","title","overview","release_date","poster_path","display","textAlign","Recommended","getMovieDetails"],"mappings":"6hBAIA,IAAMA,EAAmBC,IAAOC,IAAV,KAahBC,EAAaF,YAAOG,IAAPH,CAAH,KA8BDI,IAvBD,SAACC,GAAgB,IACtBC,EAAUD,EAAVC,MACR,QAAcC,IAAVD,EACH,OACC,kBAACJ,EAAD,CAAYM,GAAI,KACf,kBAACT,EAAD,KACC,4CANyB,IAWrBU,EAAkBH,EAAlBG,GAAIC,EAAcJ,EAAdI,UACZ,OACA,kBAACR,EAAD,CAAYM,GAAE,iBAAYC,IAC1B,kBAACV,EAAD,CAAkBY,MAAO,CACxBC,gBAAgB,sCAAD,OAAwCF,EAAxC,W,mNCpCjB,IAAMG,EAASb,IAAOc,OAAV,KAkCGC,EA5BG,SAACV,GAAgB,IAC1BW,EAAuCX,EAAvCW,OAAQC,EAA+BZ,EAA/BY,OAAQR,EAAuBJ,EAAvBI,GAChBS,EADuCb,EAAnBc,eACpBD,SACFE,EAAsC,CAC3CC,GAAI,CAAC,yBAA0B,qBAC/BC,GAAI,CAAC,iHAAwB,kHAC7BC,GAAI,CAAC,wBAAwB,yBAC7BC,GAAI,CAAC,wBAAyB,4BAE/BC,QAAQC,IAAIN,EAAYF,IACxB,IAAMS,EAAcC,aAAaC,QAAb,YAA0BpB,IAO9C,OACA,oCACCkB,EACA,kBAACd,EAAD,CAAQiB,QANW,WACnBb,EAAOR,KAKwBW,EAAYF,GAAU,IAErD,kBAACL,EAAD,CAAQiB,QAXW,WACnBd,EAAOP,KAUwBW,EAAYF,GAAU,MCLxCa,eAnBS,SAACC,GAExB,MAAO,CACNC,kBAF6CD,EAAtCC,kBAGPd,eAH6Ca,EAAnBb,mBAOD,SAACe,GAC3B,MAAO,CACNlB,OAAQ,SAACP,GAAD,OAAayB,EAASC,IAAe1B,KAC7CQ,OAAQ,SAACR,GAAD,OAAayB,EAASC,IAAe1B,QAQhCsB,EAJS,SAAC1B,GACxB,OAAO,kBAAC,EAAcA,M,gUCnBvB,IAAM+B,EAAgBpC,IAAOqC,GAAV,KAmCJC,EAvBG,SAACjC,GAAgB,IAC1Ba,EAAab,EAAMc,eAAnBD,SACGqB,EAAyClC,EAAzCkC,UAAWC,EAA8BnC,EAA9BmC,sBAAuB/B,EAAOJ,EAAPI,GAC7CgC,qBAAU,WAET,OADAF,EAAU9B,GACH,WACN+B,OAEC,CAACtB,EAAUT,EAAI8B,EAAWC,IARI,MASLnC,EAAMqC,OAA1BC,EATyB,EASzBA,KAAMC,EATmB,EASnBA,UACRC,EAAaF,EAAKG,KAAI,SAACxC,EAAYyC,GACxC,OAAIA,GAAS,EAAU,KAEvB,wBAAIC,IAAK1C,EAAMG,IACd,kBAAC,IAAD,CAAWH,MAAOA,QAIpB,OACE,kBAAC8B,EAAD,KAAgBQ,EAAY,wBAAII,IAAK,GAAT,cAA8BH,ICT9Cd,eAnBS,SAACC,GAExB,MAAO,CACNU,OAF6CV,EAAtCiB,kBAGP9B,eAH6Ca,EAAnBb,mBAOD,SAACe,GAC3B,MAAO,CACNK,UAAW,SAAC9B,GAAD,OAAgByB,EAASC,IAAyB1B,KAC7D+B,sBAAuB,kBAAMN,EAASC,WAQzBJ,EAJS,SAAC1B,GACxB,OAAO,kBAAC,EAAgBA,M,isBClBzB,IAAMN,EAAmBC,IAAOC,IAAV,KAkBhBiD,EAAclD,IAAOC,IAAV,KAmDFkD,EAhCG,SAAC9C,GAElB,IAAI+C,EAAS/C,EAAMgD,MAAMC,OAAO7C,GACxB8C,EAAalD,EAAbkD,SACFrC,EAAab,EAAMc,eAAnBD,SACNuB,qBAAU,WACTc,GAAUH,GACVI,OAAOC,SAAS,EAAG,KACjB,CAACL,EAAQlC,EAAUqC,IARW,IASzBjD,EAAUD,EAAVC,MACAqC,EAAoBrC,EAApBqC,KACR,GAD4BrC,EAAdsC,WACY,OAATD,EAAiB,OAAO,0CAXR,IAYzBe,EAAmDf,EAAnDe,MAAOC,EAA4ChB,EAA5CgB,SAAUC,EAAkCjB,EAAlCiB,aAAcC,EAAoBlB,EAApBkB,YAAapD,EAAOkC,EAAPlC,GACpD,OACA,oCACA,wBAAIE,MAAO,CAACmD,QAAS,QAASC,UAAW,WAAYL,GACrD,kBAACR,EAAD,KACA,kBAACnD,EAAD,CAAkBY,MAAO,CACxBC,gBAAgB,sCAAD,OAAwCiD,EAAxC,OAEf,kBAAC,EAAD,CAAWpD,GAAIA,KAGhB,2BAAIkD,GACJ,2BAAIC,IAEJ,2CACA,kBAACI,EAAD,CAAavD,GAAIA,MC5CHsB,uBAlBS,SAACC,GAExB,MAAO,CACN1B,MAF2C0B,EAApCiC,gBAGP9C,eAH2Ca,EAAnBb,mBAOC,SAACe,GAC3B,MAAO,CACNqB,SAAU,SAAC9C,GAAD,OAAayB,EAASC,IAAiB1B,QAQpCsB,EAJD,SAAC1B,GACd,OAAO,kBAAC,EAAcA","file":"static/js/6.68f24405.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst MovieCardWrapper = styled.div`\r\nposition: relative;\r\ndisplay: flex;\r\nwidth: 355px;\r\nheight: 533px;\r\nmargin: 0;\r\nbackground-size: cover;\r\n@media (max-width: 500px) {\r\n\twidth: 225px;\r\n\theight: 337px;\r\n}\r\n`\r\n\r\nconst StyledLink = styled(Link)`\r\ndisplay: flex;\r\njustify-content: center;\r\nalign-items: center;\r\n`\r\n\r\n\r\nconst Movie = (props: any) => {\r\n\tconst { movie } = props;\r\n\tif (movie === undefined) {\r\n\t\treturn (\r\n\t\t\t<StyledLink to={'/'}>\r\n\t\t\t\t<MovieCardWrapper>\r\n\t\t\t\t\t<h3>Loading...</h3>\r\n\t\t\t\t</MovieCardWrapper>\r\n\t\t\t</StyledLink>\r\n\t\t)\r\n\t}\r\n\tconst { id, posterUrl } = movie;\r\n\treturn (\r\n\t<StyledLink to={`/movie/${id}`}>\r\n\t<MovieCardWrapper style={{\r\n\t\tbackgroundImage: `url(https://image.tmdb.org/t/p/w500${posterUrl})`,\r\n\t\t}}\r\n\t>\r\n\t</MovieCardWrapper>\r\n\t</StyledLink>\r\n\t)\r\n}\r\n\r\nexport default Movie;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Button = styled.button`\r\nwidth: 100%;\r\nheight: 10%;\r\nopacity: 0;\r\n`\r\n\r\nconst FavButton = (props: any) => {\r\n\tconst { addFav, delFav, id, languageSelect } = props;\r\n\tconst { language } = languageSelect;\r\n\tconst translation: {[index: string]:any}  = {\r\n\t\ten: ['Remove from favourites', 'Add to favourites'],\r\n\t\tru: ['Удалить из избранных', 'Добавить в избранные'],\r\n\t\tes: ['Eliminar de favoritos','Añadir a favoritos'], \r\n\t\tpt: ['Remover dos favoritos', 'Adicionar aos favoritos'],\r\n\t}\r\n\tconsole.log(translation[language]);\r\n\tconst isFavourite = localStorage.getItem(`id${id}`);\r\n\tconst clickAddFav = () => {\r\n\t\taddFav(id);\r\n\t}\r\n\tconst clickDelFav = () => {\r\n\t\tdelFav(id);\r\n\t}\r\n\treturn (\r\n\t<>\r\n\t{isFavourite ? (\r\n\t\t<Button onClick={clickDelFav}>{translation[language][0]}</Button>\r\n\t) : (\r\n\t\t<Button onClick={clickAddFav}>{translation[language][1]}</Button>\r\n\t)}\r\n\t</>\r\n\t)\r\n}\r\n\r\nexport default FavButton;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../store/actions/favouriteMovies';\r\nimport FavButton from '../components/favbutton';\r\n\r\ndeclare var dispatch: any;\r\n\r\nconst mapStateToProps = (state: any) => {\r\n\tconst { favouriteMoviesId, languageSelect } = state;\r\n\treturn {\r\n\t\tfavouriteMoviesId,\r\n\t\tlanguageSelect,\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n\treturn {\r\n\t\taddFav: (id: any) => dispatch(actions.addFav(id)),\r\n\t\tdelFav: (id: any) => dispatch(actions.delFav(id)),\r\n\t}\r\n}\r\n\r\nconst FavouriteButton = (props: any) => {\r\n\treturn <FavButton {...props} />;\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FavouriteButton);","import React, { useEffect } from 'react';\r\nimport MovieCard from './moviecard';\r\nimport styled from 'styled-components';\r\n\r\nconst MoviesWrapper = styled.ul`\r\nlist-style: none;\r\nmargin: auto;\r\ndisplay: grid;\r\ngrid-template-columns: repeat(auto-fill, minmax(370px, 1fr));\r\ngrid-gap: 20px;\r\nalign-items: center;\r\npadding: 25px 0;\r\n@media (max-width: 500px) {\r\n\tgrid-template-columns: 1fr;\r\n}\r\n`\r\nconst MovieList = (props: any) => {\r\n\tconst { language } = props.languageSelect;\r\n    const { fetchData, newRecommendedRequest, id } = props;\t\r\n\tuseEffect(() => {\r\n\t\tfetchData(id);\r\n\t\treturn () => {\r\n\t\t\tnewRecommendedRequest();\r\n\t\t}\r\n\t}, [language, id, fetchData, newRecommendedRequest]);\r\n\tconst { data, isLoading } = props.movies;\r\n\tconst movieCards = data.map((movie: any, index: any) => {\r\n\t\tif (index >= 3) return null;\r\n\t\treturn (\r\n\t\t<li key={movie.id}>\r\n\t\t\t<MovieCard movie={movie} />\r\n\t\t</li>\r\n\t)});\r\n\r\n\treturn (\r\n\t\t\t<MoviesWrapper>{isLoading ? <h3 key={1}>Loading...</h3> : movieCards}</MoviesWrapper>\r\n\t)\r\n}\r\n\r\nexport default MovieList;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../store/actions/recommendedMovies';\r\nimport Recommended from '../components/recommended';\r\n\r\ndeclare var dispatch: any;\r\n\r\nconst mapStateToProps = (state: any) => {\r\n\tconst { recommendedMovies, languageSelect } = state;\r\n\treturn {\r\n\t\tmovies: recommendedMovies,\r\n\t\tlanguageSelect\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n\treturn {\r\n\t\tfetchData: (id: number) => dispatch(actions.fetchRecommended(id)),\r\n\t\tnewRecommendedRequest: () => dispatch(actions.newRecommendedRequest()),\r\n\t}\r\n}\r\n\r\nconst RecommendedPage = (props: any) => {\r\n\treturn <Recommended {...props} />;\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RecommendedPage);","import React, { useEffect } from 'react';\r\nimport FavButton from '../containers/FavouriteButton';\r\nimport Recommended from '../containers/Recommended';\r\nimport styled from 'styled-components';\r\n\r\nconst MovieCardWrapper = styled.div`\r\nposition: relative;\r\ndisplay: flex;\r\nflex-shrink: 0;\r\nwidth: 355px;\r\nheight: 533px;\r\nmargin: 0;\r\nbackground-size: cover;\r\nalign-items: center;\r\n&:hover button {\r\n\topacity: 1;\r\n}\r\n@media (max-width: 500px) {\r\n\twidth: 225px;\r\n\theight: 337px;\r\n}\r\n`\r\n\r\nconst PageWrapper = styled.div`\r\ndisplay: flex;\r\nmargin: 0 auto;\r\nmargin-top: 30px;\r\npadding: 20px;\r\nbox-sizing: border-box;\r\nwidth: 80%;\r\nflex-direction: row;\r\nbackground-color: #f2f4f4;\r\n@media (max-width: 950px) {\r\n\t\tflex-direction: column;\r\n\t\talign-items: center;\r\n\t}\r\n@media (max-width: 500px) {\r\n\t\twidth: 100%;\r\n\t\tpadding: 0px;\r\n\t}\r\n`\r\n\r\nconst MoviePage = (props: any) => {\r\n\t// url_id for recommended\r\n\tlet url_id = props.match.params.id\r\n\tconst { getMovie } = props;\r\n\tlet { language } = props.languageSelect;\r\n\tuseEffect(() => {\r\n\t\tgetMovie(+url_id);\r\n\t\twindow.scrollTo(0, 0)\r\n\t}, [url_id, language, getMovie])\r\n\tconst { movie } = props;\r\n\tconst { data, isLoading } = movie;\r\n\tif (isLoading || data === null) { return <h3>Loading...</h3> };\r\n\tconst { title, overview, release_date, poster_path, id } = data;\r\n\treturn (\r\n\t<>\r\n\t<h1 style={{display: 'block', textAlign: 'center'}}>{title}</h1>\r\n\t<PageWrapper>\r\n\t<MovieCardWrapper style={{\r\n\t\tbackgroundImage: `url(https://image.tmdb.org/t/p/w500${poster_path})`,\r\n\t\t}}\r\n\t><FavButton id={id} />\r\n\t</MovieCardWrapper>\r\n\t\r\n\t<p>{overview}</p>\r\n\t<p>{release_date}</p>\r\n\t</PageWrapper>\r\n\t<h2>Recommended</h2>\r\n\t<Recommended id={id} />\r\n\t</>\r\n\t)\r\n}\r\n\r\nexport default MoviePage;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../store/actions/getMovie';\r\nimport MoviePage from '../components/moviepage';\r\n\r\ndeclare var dispatch: any;\r\n\r\nconst mapStateToProps = (state: any) => {\r\n\tconst { getMovieDetails, languageSelect } = state;\r\n\treturn {\r\n\t\tmovie: getMovieDetails,\r\n\t\tlanguageSelect\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n\treturn {\r\n\t\tgetMovie: (id: any) => dispatch(actions.getMovie(id)),\r\n\t}\r\n}\r\n\r\nconst Movie = (props: any) => {\r\n\treturn <MoviePage {...props} />;\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Movie);"],"sourceRoot":""}